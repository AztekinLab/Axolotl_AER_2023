)
}
p_cell <- ggplot(CellNum, aes(id, CellNum, fill = Species)) +
geom_bar(stat = "identity") +
ggtitle("Cell Numbers") +
p_theme()
p_cell
CellNum$Species <- factor(CellNum$Species, levels = levels(df$sp))
p_cell <- ggplot(CellNum, aes(id, CellNum, fill = Species)) +
geom_bar(stat = "identity") +
ggtitle("Cell Numbers") +
p_theme()
p_cell
p_cell <- ggplot(CellNum[order(CellNum$Species, decreasing = T),], aes(id, CellNum, fill = Species)) +
geom_bar(stat = "identity") +
ggtitle("Cell Numbers") +
p_theme()
p_cell
CellNum <- read.table('/Users/jzhong/Desktop/Desktop–SV-96M-002/EPFL/project/axolotl_aer_final/rmd_pl_figs/CellNum.txt', header = TRUE)
ggplot(CellNum, aes(id, CellNum, fill = Species)) +
geom_bar(stat = "identity") +
ggtitle("Cell Numbers") +
p_theme()
str(CellNum)
View(CellNum)
le_sp <- c("Human", "Mouse", "Chicken", "Frog", "Axolotl")
le_id <- c(
"Human_CS13", "Human_CS13_2",
"Mouse_E95", "Mouse_E105", "Mouse_E115", "Mouse_E125",
"Chicken_E45",
"Frog_NF50", "Frog_NF51", "Frog_NF52", "Frog_NF54",
"Axolotl_ST50", "Axolotl_ST52", "Axolotl_ST54"
)
CellNum$Species <- factor(CellNum$Species, levels = le_sp)
CellNum$id <- factor(CellNum$Species, levels = le_id)
ggplot(CellNum, aes(id, CellNum, fill = Species)) +
geom_bar(stat = "identity") +
ggtitle("Cell Numbers") +
p_theme()
View(CellNum)
CellNum <- read.table('/Users/jzhong/Desktop/Desktop–SV-96M-002/EPFL/project/axolotl_aer_final/rmd_pl_figs/CellNum.txt', header = TRUE)
CellNum$Species <- factor(CellNum$Species, levels = le_sp)
CellNum$id <- factor(CellNum$id, levels = le_id)
ggplot(CellNum, aes(id, CellNum, fill = Species)) +
geom_bar(stat = "identity") +
ggtitle("Cell Numbers") +
p_theme()
saveRDS(CellNum, '/Users/jzhong/Desktop/Desktop–SV-96M-002/EPFL/project/axolotl_aer_final/rmd_pl_figs/CellNum.rds')
head(df)
p_umi <- ggplot(df, aes(x = old.ident, y = nCount_RNA, fill = sp)) +
geom_flat_violin(
position = position_nudge(x = 0, y = 0),
adjust = 2, trim = TRUE, scale = "width", color = NA, alpha = 0.7
) +
geom_boxplot(
position = position_nudge(x = -.2, y = 0),
outlier.shape = NA, width = .2, lwd = .2,
) +
ggtitle("Transcript numbers per cell") +
p_theme()
p_umi
str(df)
df$old.ident <- factor(df$old.ident, levels = le_id)
str(df)
p_umi <- ggplot(df, aes(x = old.ident, y = nCount_RNA, fill = sp)) +
geom_flat_violin(
position = position_nudge(x = 0, y = 0),
adjust = 2, trim = TRUE, scale = "width", color = NA, alpha = 0.7
) +
geom_boxplot(
position = position_nudge(x = -.2, y = 0),
outlier.shape = NA, width = .2, lwd = .2,
) +
ggtitle("Transcript numbers per cell") +
p_theme()
p_umi
saveRDS(df, '/Users/jzhong/Desktop/Desktop–SV-96M-002/EPFL/project/axolotl_aer_final/rmd_pl_figs/separate_clustering_meta_data.rds')
p_cell <- ggplot(CellNum, aes(id, CellNum, fill = Species)) +
geom_bar(stat = "identity") +
ggtitle("Cell Numbers") +
p_theme()
p_umi <- ggplot(df, aes(x = old.ident, y = nCount_RNA, fill = sp)) +
geom_flat_violin(
position = position_nudge(x = 0, y = 0),
adjust = 2, trim = TRUE, scale = "width", color = NA, alpha = 0.7
) +
geom_boxplot(
position = position_nudge(x = -.2, y = 0),
outlier.shape = NA, width = .2, lwd = .2,
) +
ggtitle("Transcript numbers per cell") +
p_theme()
p_gene <- ggplot(df, aes(x = old.ident, y = nFeature_RNA, fill = sp)) +
geom_flat_violin(
position = position_nudge(x = 0, y = 0),
adjust = 2, trim = TRUE, scale = "width", color = NA, alpha = 0.7
) +
geom_boxplot(
position = position_nudge(x = -.2, y = 0),
outlier.shape = NA, width = .2, lwd = .2,
) +
ggtitle("Gene numbers per cell") +
p_theme()
p_mito <- ggplot(df, aes(x = old.ident, y = percent.mt, fill = sp)) +
geom_flat_violin(
position = position_nudge(x = 0, y = 0),
adjust = 2, trim = TRUE, scale = "width", color = NA, alpha = 0.7
) +
geom_boxplot(
position = position_nudge(x = -.2, y = 0),
outlier.shape = NA, width = .2, lwd = .2,
) +
ggtitle("Percentage of mitochodrial genes per cell") +
p_theme()
wrap_plots(p_cell, p_umi, p_gene, p_mito, ncol = 1)
cols2 <- c(
brewer.pal(12, "Paired")[c(1:10, 12)],
"#F0027F"
)
levels(df$CellType2)
names(cols2) <- levels(df$CellType2)
levels(df$CellType2_sep)
le2 <- c(
"CT",
"BasalEctoderm",
"Muscle",
"Blood",
"Immune",
"Endo",
"Epithelium",
"Goblet",
"DiffEctoderm",
"Pericyte",
"Schwann",
"Ionocyte",
"Neuron",
"NeuralCrest",
"Endo_Blood",
"AER",
"Immune_Blood",
"Unknown"
)
cols2 <- c(
brewer.pal(12, "Paired")[c(1:10, 12)],
brewer.pal(3, "Dark2")[1:2],
"#F27507", "#CB5081", "#F0027F", "#CED9A9", "grey"
)
names(cols2) <- le2
p_list <- lapply(sort(unique(df$old.ident)), function(x){
df_sub <- df[df$old.ident == x,]
ggplot(df_sub, aes(UMAP_1, UMAP_2, color = CellType2_sep)) + geom_point() +
theme_classic() + scale_color_manual(values = cols2)
})
wrap_plots(p_list, n = 3)
# laod necessary data
load('../data/Fig1_data/Fig1_supp.rdata')
mat_list <- lapply(seu_list, fetch_data,
marker_sp_list = marker_sp,
group.by = "CellType2",
split.by = "orig.ident"
)
total_mat <- Reduce(rbind, mat_list)
le_celltype2
le_gene
total_mat <- mat_formating(total_mat, le_celltype = le_celltype2, le_gene = le_gene)
View(total_mat)
save(le_celltype2, le_gene, marker_sp, total_mat, file = '/Users/jzhong/Desktop/Desktop–SV-96M-002/EPFL/project/axolotl_aer_final/rmd_pl_figs/Fig1/Fig1_supp.rdata')
features.plot
dot_plot(
total_mat = total_mat,
x = features.plot, y = CellType
)
str(total_mat)
saveRDS(total_mat, file = '/Users/jzhong/Desktop/Desktop–SV-96M-002/EPFL/project/axolotl_aer_final/rmd_pl_figs/Fig1/Fig1_supp.rds')
df <- readRDS("../data/Fig1_data/AUCell_scores.rds")
df <- df[df$CellType2 != "Delected", ]
df_mean <- df %>%
group_by(sp, CellType2) %>%
summarise(mean = mean(sig))
df_mean_wide <- spread(df_mean, key = sp, value = mean)
rn <- df_mean_wide$CellType2
df_mean_wide <- df_mean_wide[, -1]
ComplexHeatmap::pheatmap(df_mean_wide[rn %in% c("AER", "BasalEctoderm"), ],
cluster_rows = FALSE, cluster_cols = FALSE,
labels_row = rn[rn %in% c("AER", "BasalEctoderm")],
colorRampPalette(c("white", "firebrick3"))(10),
na_col = "grey"
)
df_mean_wide
ComplexHeatmap::pheatmap(df_mean_wide,
cluster_rows = FALSE, cluster_cols = FALSE,
labels_row = rn,
colorRampPalette(c("white", "firebrick3"))(10),
na_col = "grey"
)
na_idx <- is.na(df_mean_wide)
df_mean_wide[na_idx] <- 0
# normalize
df_mean_wide_norm <- apply(df_mean_wide, 2, function(x) x / max(x))
df_mean_wide_norm[na_idx] <- NA
ComplexHeatmap::pheatmap(df_mean_wide_norm,
cluster_rows = FALSE, cluster_cols = FALSE,
labels_row = rn, colorRampPalette(c("white", "firebrick3"))(10),
na_col = "grey"
)
ComplexHeatmap::pheatmap(df_mean_wide,
name = 'Enrichment score',
cluster_rows = FALSE, cluster_cols = FALSE,
labels_row = rn,
colorRampPalette(c("white", "firebrick3"))(10),
na_col = "grey"
)
na_idx <- is.na(df_mean_wide)
df_mean_wide[na_idx] <- 0
# normalize
df_mean_wide_norm <- apply(df_mean_wide, 2, function(x) x / max(x))
df_mean_wide_norm[na_idx] <- NA
ComplexHeatmap::pheatmap(df_mean_wide_norm,
name = 'Normalized enrichment score',
cluster_rows = FALSE, cluster_cols = FALSE,
labels_row = rn, colorRampPalette(c("white", "firebrick3"))(10),
na_col = "grey"
)
p1 <- ComplexHeatmap::pheatmap(df_mean_wide,
name = 'Enrichment score',
cluster_rows = FALSE, cluster_cols = FALSE,
labels_row = rn,
colorRampPalette(c("white", "firebrick3"))(10),
na_col = "grey"
)
na_idx <- is.na(df_mean_wide)
df_mean_wide[na_idx] <- 0
# normalize
df_mean_wide_norm <- apply(df_mean_wide, 2, function(x) x / max(x))
df_mean_wide_norm[na_idx] <- NA
p2 <- ComplexHeatmap::pheatmap(df_mean_wide_norm,
name = 'Normalized enrichment score',
cluster_rows = FALSE, cluster_cols = FALSE,
labels_row = rn, colorRampPalette(c("white", "firebrick3"))(10),
na_col = "grey"
)
p1 + p2
p1 / p2
p1 <- ComplexHeatmap::pheatmap(df_mean_wide,
name = 'Enrichment score',
cluster_rows = FALSE, cluster_cols = FALSE,
labels_row = rn,
colorRampPalette(c("white", "firebrick3"))(10),
na_col = "grey"
)
na_idx <- is.na(df_mean_wide)
df_mean_wide[na_idx] <- 0
# normalize
df_mean_wide_norm <- apply(df_mean_wide, 2, function(x) x / max(x))
df_mean_wide_norm[na_idx] <- NA
p2 <- ComplexHeatmap::pheatmap(df_mean_wide_norm,
name = 'Normalized enrichment score',
cluster_rows = FALSE, cluster_cols = FALSE,
labels_row = rn, colorRampPalette(c("white", "firebrick3"))(10),
na_col = "grey"
)
p1 | p2
wrap_plots(p1, p2, ncol = 1)
draw(p1, heatmap_legend_side = "bottom") + draw(p2)
library(ComplexHeatmap)
p1 <- ComplexHeatmap::pheatmap(df_mean_wide,
name = 'Enrichment score',
cluster_rows = FALSE, cluster_cols = FALSE,
labels_row = rn,
colorRampPalette(c("white", "firebrick3"))(10),
na_col = "grey"
)
na_idx <- is.na(df_mean_wide)
df_mean_wide[na_idx] <- 0
# normalize
df_mean_wide_norm <- apply(df_mean_wide, 2, function(x) x / max(x))
df_mean_wide_norm[na_idx] <- NA
p2 <- ComplexHeatmap::pheatmap(df_mean_wide_norm,
name = 'Normalized enrichment score',
cluster_rows = FALSE, cluster_cols = FALSE,
labels_row = rn, colorRampPalette(c("white", "firebrick3"))(10),
na_col = "grey"
)
draw(p1, heatmap_legend_side = "bottom") + draw(p2)
p1 <- draw(p1, heatmap_legend_side = "left")
p1 + p2
p1 <- ComplexHeatmap::pheatmap(df_mean_wide,
name = 'Enrichment score',
cluster_rows = FALSE, cluster_cols = FALSE,
labels_row = rn,
colorRampPalette(c("white", "firebrick3"))(10),
na_col = "grey"
)
na_idx <- is.na(df_mean_wide)
df_mean_wide[na_idx] <- 0
# normalize
df_mean_wide_norm <- apply(df_mean_wide, 2, function(x) x / max(x))
df_mean_wide_norm[na_idx] <- NA
p2 <- ComplexHeatmap::pheatmap(df_mean_wide_norm,
name = 'Normalized enrichment score',
cluster_rows = FALSE, cluster_cols = FALSE,
labels_row = rn, colorRampPalette(c("white", "firebrick3"))(10),
na_col = "grey"
)
p1 %v% p2
library(ggtext)
total_mat <- readRDS('../mat_list.rds')
total_mat <- Reduce(rbind, mat_list)
total_mat <- Reduce(rbind, mat_list)
total_mat$id <- gsub("AER_", "", total_mat$id)
total_mat$id <- factor(total_mat$id,
levels = c(
"Human_CS13",
"Mouse_E95", "Mouse_E105", "Mouse_E115", "Mouse_E125",
"Chicken_E45",
"Frog_NF50", "Frog_NF51", "Frog_NF52", "Frog_NF54",
"Axolotl_ST50", "Axolotl_ST52", "Axolotl_ST54"
)
)
genes.to.plot <- unique(total_mat$features.plot)
all(genes.to.plot %in% names(gene2pathway))
total_mat <- scaling_exp(total_mat, scale.by = "id")
total_mat <- scaling_exp(total_mat, scale.by = "features.plot")
total_mat$avg.exp[total_mat$avg.exp == 0] <- NA
empty_axo_genes <- total_mat[grepl("\\.[0-9]+$", total_mat$features.plot), ] %>%
group_by(features.plot) %>%
summarise(test = all(is.na(avg.exp))) %>%
filter(test == TRUE) %>%
select(features.plot)
empty_axo_genes <- as.character(empty_axo_genes$features.plot)
total_mat <- total_mat[!(as.character(total_mat$features.plot) %in% empty_axo_genes), ]
## set format of y axis text
cols <- brewer.pal(5, "Set2")
names(cols) <- c("Human", "Mouse", "Chicken", "Frog", "Axolotl")
total_mat$sp <- gsub("_.*", "", total_mat$id)
total_mat$stage <- gsub(".*_", "", total_mat$id)
total_mat <- total_mat %>% mutate(
id2 = paste0("<span style='color:", cols[sp], "'>**", sp, "**</span><span style='color:black'>_", stage, "</span>"),
id2 = fct_reorder(id2, as.numeric(id))
)
total_mat <- total_mat %>% mutate(
id2 = paste0("<span style='color:", cols[sp], "'>**", sp, "**</span><span style='color:black'>_", stage, "</span>"),
id2 = tidyverse::fct_reorder(id2, as.numeric(id))
)
library(tidyverse)
total_mat <- total_mat %>% mutate(
id2 = paste0("<span style='color:", cols[sp], "'>**", sp, "**</span><span style='color:black'>_", stage, "</span>"),
id2 = fct_reorder(id2, as.numeric(id))
)
head(total_mat)
gene2pathway <- readRDS('../gene2pathway.rds')
p_list <- lapply(sort(unique(gene2pathway)), FUN = function(i) {
genes <- names(gene2pathway)[gene2pathway == i]
total_mat_sub <- subset(total_mat, features.plot %in% genes)
idx <- str_order(unique(total_mat_sub$features.plot), numeric = T)
total_mat_sub$features.plot <- factor(total_mat_sub$features.plot,
levels = unique(total_mat_sub$features.plot)[idx]
)
p <- dot_plot(total_mat = total_mat_sub, x = features.plot, y = id2) +
theme(axis.text.y = element_markdown())
p <- p + labs(title = i)
return(p)
})
names(gene2pathway)
tail(gene2pathway)
genes <- names(gene2pathway)[gene2pathway == 'Marker_short']
total_mat_sub <- subset(total_mat, features.plot %in% genes)
idx <- str_order(unique(total_mat_sub$features.plot), numeric = T)
total_mat_sub$features.plot <- factor(total_mat_sub$features.plot,
levels = unique(total_mat_sub$features.plot)[idx]
)
p <- dot_plot(total_mat = total_mat_sub, x = features.plot, y = id2) +
theme(axis.text.y = element_markdown())
p <- p + labs(title = 'Marker_short')
p
total_mat_sub
wrap_plots(p_list)
genes
idx
total_mat_sub
View(total_mat_sub)
View(total_mat)
meta_data <- readRDS('../Fig1/meta_data.rds')
sp_col <- list(
"Human" =  c("#66C2A5"),
"Mouse" = c("#FC8D62", "#DC4204", "#B43604", "#641E02"),
"Chicken" = c("#8DA0CB"),
"Frog" = c("#E78AC3", "#D53497", "#981F6A", "#55113B"),
"Axolotl" = c("#A6D854", "#75A626", "#3A5313")
)
p1 <- ggplot(meta_data, aes(UMAP_1, UMAP_2, color = CellType2)) + geom_point() +
theme_classic() + scale_color_manual(values = cols2)
p_list <- lapply(levels(meta_data$sp), function(x) {
dat <- meta_data
dat$col <- as.character(dat$orig.ident)
dat$col[dat$sp != x]  <- 'Unselected'
sample_ <- as.character(sort(unique(dat$orig.ident[multi$sp == x])))
dat$col <- factor(dat$col, levels = c(sample_,'Unselected'))
color <-  c(rev(sp_col[[x]]),"lightgrey")
names(color)<- levels(dat$col)
ggplot(dat[order(dat$col, decreasing = T),], aes(UMAP_1, UMAP_2, color = col)) +
geom_point() + theme_classic() + scale_color_manual(values = color) +
labs(title = x) +
theme(
plot.title = element_text(hjust = 0.5, size = 25),
legend.position = c(0.1, 0.8) # inside the plot
) & coord_fixed()
})
p2 <- wrap_plots(p_list, nrow = 2)
p1 + p2
levels(meta_data$sp)
library(ggplot2)
library(RColorBrewer)
meta_data <- readRDS('../Fig1/meta_data.rds')
cols2 <- c(
brewer.pal(12, "Paired")[c(1:10, 12)],
"#F0027F"
)
names(cols2) <- levels(meta_data$CellType2)
sp_col <- list(
"Human" =  c("#66C2A5"),
"Mouse" = c("#FC8D62", "#DC4204", "#B43604", "#641E02"),
"Chicken" = c("#8DA0CB"),
"Frog" = c("#E78AC3", "#D53497", "#981F6A", "#55113B"),
"Axolotl" = c("#A6D854", "#75A626", "#3A5313")
)
p1 <- ggplot(meta_data, aes(UMAP_1, UMAP_2, color = CellType2)) + geom_point() +
theme_classic() + scale_color_manual(values = cols2)
p1
x <- 'Human'
dat <- meta_data
dat$col <- as.character(dat$orig.ident)
dat$col[dat$sp != x]  <- 'Unselected'
sample_ <- as.character(sort(unique(dat$orig.ident[dat$sp == x])))
dat$col <- factor(dat$col, levels = c(sample_,'Unselected'))
color <-  c(rev(sp_col[[x]]),"lightgrey")
names(color)<- levels(dat$col)
ggplot(dat[order(dat$col, decreasing = T),], aes(UMAP_1, UMAP_2, color = col)) +
geom_point() + theme_classic() + scale_color_manual(values = color) +
labs(title = x) +
theme(
plot.title = element_text(hjust = 0.5, size = 25),
legend.position = c(0.1, 0.8) # inside the plot
) & coord_fixed()
ggplot(dat[order(dat$col, decreasing = T),], aes(UMAP_1, UMAP_2, color = col)) +
geom_point() + theme_classic() + scale_color_manual(values = color) +
labs(title = x) +
theme(
plot.title = element_text(hjust = 0.5, size = 25),
legend.position = c(0.1, 0.8) # inside the plot
) & coord_fixed()
p_list <- lapply(levels(meta_data$sp), function(x) {
dat <- meta_data
dat$col <- as.character(dat$orig.ident)
dat$col[dat$sp != x]  <- 'Unselected'
sample_ <- as.character(sort(unique(dat$orig.ident[dat$sp == x])))
dat$col <- factor(dat$col, levels = c(sample_,'Unselected'))
color <-  c(rev(sp_col[[x]]),"lightgrey")
names(color) <- levels(dat$col)
ggplot(dat[order(dat$col, decreasing = T),], aes(UMAP_1, UMAP_2, color = col)) +
geom_point() + theme_classic() + scale_color_manual(values = color) +
labs(title = x) +
theme(
plot.title = element_text(hjust = 0.5, size = 25),
legend.position = c(0.1, 0.8) # inside the plot
) & coord_fixed()
})
p2 <- wrap_plots(p_list, nrow = 2)
p1 + p2
p1 + p2
library(ggplot2)
library(RColorBrewer)
meta_data <- readRDS('../Fig1/meta_data.rds')
cols2 <- c(
brewer.pal(12, "Paired")[c(1:10, 12)],
"#F0027F"
)
names(cols2) <- levels(meta_data$CellType2)
sp_col <- list(
"Human" =  c("#66C2A5"),
"Mouse" = c("#FC8D62", "#DC4204", "#B43604", "#641E02"),
"Chicken" = c("#8DA0CB"),
"Frog" = c("#E78AC3", "#D53497", "#981F6A", "#55113B"),
"Axolotl" = c("#A6D854", "#75A626", "#3A5313")
)
p1 <- ggplot(meta_data, aes(UMAP_1, UMAP_2, color = CellType2)) + geom_point() +
theme_classic() + scale_color_manual(values = cols2)
p_list <- lapply(levels(meta_data$sp), function(x) {
print(x)
dat <- meta_data
dat$col <- as.character(dat$orig.ident)
dat$col[dat$sp != x]  <- 'Unselected'
sample_ <- as.character(sort(unique(dat$orig.ident[dat$sp == x])))
dat$col <- factor(dat$col, levels = c(sample_,'Unselected'))
color <-  c(rev(sp_col[[x]]),"lightgrey")
names(color) <- levels(dat$col)
dat2 <- dat[order(dat$col, decreasing = T),]
ggplot(dat2, aes(UMAP_1, UMAP_2, color = col)) +
geom_point() + theme_classic() + scale_color_manual(values = color) +
labs(title = x) +
theme(
plot.title = element_text(hjust = 0.5, size = 25),
legend.position = c(0.1, 0.8) # inside the plot
) & coord_fixed()
})
p2 <- wrap_plots(p_list, nrow = 2)
p1 + p2
total_mat <- readRDS( '../Fig1/Fig1_supp.rds')
dot_plot(
total_mat = total_mat,
x = features.plot, y = CellType
)
